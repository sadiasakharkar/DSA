==========================
SINGLY CIRCULAR LINKED LIST (SCLL) ALGORITHMS
==========================

Node Structure:
---------------
class CNode {
    int data;
    CNode next;

    CNode(int d) {
        data = d;
        next = null;
    }
}

Head Pointer:
-------------
CNode head = null;

ADT (Operations List):
---------------------
insertFirst(data)
insertLast(data)
insertAt(index, data)
deleteFirst()
deleteLast()
deleteAt(index)
search(value)
display()
isEmpty()

==========================
1) Create Node and Insert at End (create / add)
--------------------------
Precondition: head may be null
Postcondition: New node added at end; last node points to head

Algorithm:
1. Create new node temp = new CNode(data)
2. If head == null
       head = temp
       temp.next = head
       Return
3. Else
       Set ptr = head
       While ptr.next != head
           ptr = ptr.next
       End While
       ptr.next = temp
       temp.next = head
4. Return head

==========================
2) insertFirst(data)
--------------------------
Precondition: head may be null
Postcondition: New node inserted at beginning; last node points to new head

Algorithm:
1. Create new node temp = new CNode(data)
2. If head == null
       head = temp
       temp.next = head
       Return
3. Else
       Set ptr = head
       While ptr.next != head
           ptr = ptr.next
       End While
       temp.next = head
       ptr.next = temp
       head = temp
4. Return head

==========================
3) insertLast(data)
--------------------------
Precondition: head may be null
Postcondition: New node inserted at end; last node points to head

Algorithm:
1. Create new node temp = new CNode(data)
2. If head == null
       head = temp
       temp.next = head
       Return
3. Else
       Set ptr = head
       While ptr.next != head
           ptr = ptr.next
       End While
       ptr.next = temp
       temp.next = head
4. Return head

==========================
4) insertAt(index, data)
--------------------------
Precondition: 0 ≤ index ≤ length
Postcondition: Node inserted at given index

Algorithm:
1. If index == 0
       Call insertFirst(data)
       Return
2. Create new node temp = new CNode(data)
3. Set ptr = head
4. For i = 0 to index - 2
       ptr = ptr.next
5. temp.next = ptr.next
6. ptr.next = temp
7. Return head

==========================
5) deleteFirst()
--------------------------
Precondition: head != null
Postcondition: First node removed; head updated; last node points to new head

Algorithm:
1. If head == null
       Print "List is empty"
       Return
2. If head.next == head
       head = null
       Return
3. Set ptr = head
4. While ptr.next != head
       ptr = ptr.next
5. head = head.next
6. ptr.next = head
7. Return head

==========================
6) deleteLast()
--------------------------
Precondition: head != null
Postcondition: Last node removed; last node points to head

Algorithm:
1. If head == null
       Print "List is empty"
       Return
2. If head.next == head
       head = null
       Return
3. Set ptr = head
4. While ptr.next.next != head
       ptr = ptr.next
5. ptr.next = head
6. Return head

==========================
7) deleteAt(index)
--------------------------
Precondition: 0 ≤ index < length
Postcondition: Node at index removed

Algorithm:
1. If head == null
       Print "List is empty"
       Return
2. If index == 0
       Call deleteFirst()
       Return
3. Set ptr = head
4. For i = 0 to index - 1
       ptr = ptr.next
5. ptr.next = ptr.next.next
6. Return head

==========================
8) search(value)
--------------------------
Precondition: List exists
Postcondition: Prints index if value found; else "Not found"

Algorithm:
1. Set ptr = head
2. index = 0
3. Do
       If ptr.data == value
           Print "Found at index: " + index
           Return
       ptr = ptr.next
       index++
   While ptr != head
4. Print "Value not found"

==========================
9) display()
--------------------------
Precondition: List exists
Postcondition: All nodes printed

Algorithm:
1. If head == null
       Print "List is empty"
       Return
2. Set ptr = head
3. Do
       Print ptr.data + " -> "
       ptr = ptr.next
   While ptr != head
4. Print "(head)"

==========================
10) isEmpty()
--------------------------
Precondition: List exists
Postcondition: Returns true if list empty; else false

Algorithm:
1. If head == null
       Return true
2. Else
       Return false

==========================
