Class QueueArray
    max_size = 20
    front = 0
    rear = -1
    data[20]      // Array to store queue elements


=========================
Function: isEmpty()
Precondition: Queue is initialized
Postcondition: Returns True if queue is empty, else False
Time Complexity: O(1)
=========================
Function isEmpty():
    if front > rear:
        return True
    else:
        return False


=========================
Function: isFull()
Precondition: Queue is initialized
Postcondition: Returns True if queue is full, else False
Time Complexity: O(1)
=========================
Function isFull():
    if rear == max_size - 1:
        return True
    else:
        return False


=========================
Function: enqueue(item)
Precondition: Queue is initialized
Postcondition: Inserts element at the rear if not full
Time Complexity: O(1)
=========================
Function enqueue(item):
    if isFull():
        print("Queue Overflow - Cannot enqueue", item)
    else:
        rear = rear + 1
        data[rear] = item
        print("Enqueued:", item)


=========================
Function: dequeue()
Precondition: Queue is initialized
Postcondition: Removes and returns element from the front if not empty
Time Complexity: O(1)
=========================
Function dequeue():
    if isEmpty():
        print("Queue Underflow - Queue is empty")
        return None
    else:
        item = data[front]
        print("Dequeued:", item)
        front = front + 1
        return item


=========================
Function: display()
Precondition: Queue is initialized
Postcondition: Prints all elements from front to rear
Time Complexity: O(n) where n = number of elements in queue
=========================
Function display():
    if isEmpty():
        print("Queue is empty")
    else:
        for i from front to rear:
            print(data[i])
