Class Node
    data
    next


Class CircularQueueLinkedList
    rear = NULL


=========================
Function: isEmpty()
Precondition: Queue is initialized
Postcondition: Returns True if queue is empty, else False
Time Complexity: O(1)
=========================
Function isEmpty():
    return rear == NULL


=========================
Function: enqueue(item)
Precondition: Queue is initialized
Postcondition: Inserts element at the rear in circular manner
Time Complexity: O(1)
=========================
Function enqueue(item):
    temp = new Node
    temp.data = item
    if isEmpty():
        rear = temp
        rear.next = rear
    else:
        temp.next = rear.next
        rear.next = temp
        rear = temp
    print("Enqueued:", item)


=========================
Function: dequeue()
Precondition: Queue is initialized
Postcondition: Removes and returns element from front if not empty
Time Complexity: O(1)
=========================
Function dequeue():
    if isEmpty():
        print("Queue Underflow")
        return None
    else:
        front = rear.next
        item = front.data
        if rear == front:
            rear = NULL
        else:
            rear.next = front.next
        print("Dequeued:", item)
        return item


=========================
Function: display()
Precondition: Queue is initialized
Postcondition: Prints all elements from front to rear in circular order
Time Complexity: O(n) where n = number of elements in queue
=========================
Function display():
    if isEmpty():
        print("Queue is empty")
    else:
        temp = rear.next
        while True:
            print(temp.data)
            if temp == rear:
                break
            temp = temp.next
