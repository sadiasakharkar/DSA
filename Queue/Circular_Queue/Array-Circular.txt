Class CircularQueueArray
    max_size = n
    front = -1
    rear = -1
    data[n]


=========================
Function: isEmpty()
Precondition: Queue is initialized
Postcondition: Returns True if queue is empty, else False
Time Complexity: O(1)
=========================
Function isEmpty():
    if front == -1:
        return True
    else:
        return False

=========================
Function: isFull()
Precondition: Queue is initialized
Postcondition: Returns True if queue is full, else False
Time Complexity: O(1)
=========================
Function isFull():
    if (rear + 1) % max_size == front:
        return True
    else:
        return False

=========================
Function: enqueue(item)
Precondition: Queue is initialized
Postcondition: Inserts element at rear in circular manner if not full
Time Complexity: O(1)
=========================
Function enqueue(item):
    if isFull():
        print("Queue Overflow")
    else if isEmpty():
        front = rear = 0
        data[rear] = item
    else:
        rear = (rear + 1) % max_size
        data[rear] = item
    print("Enqueued:", item)


=========================
Function: dequeue()
Precondition: Queue is initialized
Postcondition: Removes and returns element from front if not empty
Time Complexity: O(1)
=========================
Function dequeue():
    if isEmpty():
        print("Queue Underflow")
        return None
    else:
        item = data[front]
        if front == rear:
            front = rear = -1
        else:
            front = (front + 1) % max_size
        print("Dequeued:", item)
        return item


=========================
Function: display()
Precondition: Queue is initialized
Postcondition: Prints all elements from front to rear in circular order
Time Complexity: O(n) where n = number of elements in queue
=========================
Function display():
    if isEmpty():
        print("Queue is empty")
    else:
        i = front
        while True:
            print(data[i])
            if i == rear:
                break
            i = (i + 1) % max_size
